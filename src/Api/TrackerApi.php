<?php
/**
 * TrackerApi
 * PHP version 7.2
 *
 * @category Class
 * @package  FilippoToso\Rasa
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Rasa - Server Endpoints
 *
 * The Rasa server provides endpoints to retrieve trackers of conversations as well as endpoints to modify them. Additionally, endpoints for training and testing models are provided.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FilippoToso\Rasa\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use FilippoToso\Rasa\ApiException;
use FilippoToso\Rasa\Configuration;
use FilippoToso\Rasa\HeaderSelector;
use FilippoToso\Rasa\ObjectSerializer;

/**
 * TrackerApi Class Doc Comment
 *
 * @category Class
 * @package  FilippoToso\Rasa
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TrackerApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addConversationMessage
     *
     * Add a message to a tracker
     *
     * @param  string $conversationId Id of the conversation (required)
     * @param  \FilippoToso\Rasa\Model\Message $message message (required)
     * @param  string $includeEvents Specify which events of the tracker the response should contain. (optional, default to 'AFTER_RESTART')
     *
     * @throws \FilippoToso\Rasa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FilippoToso\Rasa\Model\Tracker|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error
     */
    public function addConversationMessage($conversationId, $message, $includeEvents = 'AFTER_RESTART')
    {
        list($response) = $this->addConversationMessageWithHttpInfo($conversationId, $message, $includeEvents);
        return $response;
    }

    /**
     * Operation addConversationMessageWithHttpInfo
     *
     * Add a message to a tracker
     *
     * @param  string $conversationId Id of the conversation (required)
     * @param  \FilippoToso\Rasa\Model\Message $message (required)
     * @param  string $includeEvents Specify which events of the tracker the response should contain. (optional, default to 'AFTER_RESTART')
     *
     * @throws \FilippoToso\Rasa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FilippoToso\Rasa\Model\Tracker|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function addConversationMessageWithHttpInfo($conversationId, $message, $includeEvents = 'AFTER_RESTART')
    {
        $request = $this->addConversationMessageRequest($conversationId, $message, $includeEvents);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\FilippoToso\Rasa\Model\Tracker' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Tracker', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\FilippoToso\Rasa\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\FilippoToso\Rasa\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\FilippoToso\Rasa\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\FilippoToso\Rasa\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\FilippoToso\Rasa\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FilippoToso\Rasa\Model\Tracker';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Tracker',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addConversationMessageAsync
     *
     * Add a message to a tracker
     *
     * @param  string $conversationId Id of the conversation (required)
     * @param  \FilippoToso\Rasa\Model\Message $message (required)
     * @param  string $includeEvents Specify which events of the tracker the response should contain. (optional, default to 'AFTER_RESTART')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addConversationMessageAsync($conversationId, $message, $includeEvents = 'AFTER_RESTART')
    {
        return $this->addConversationMessageAsyncWithHttpInfo($conversationId, $message, $includeEvents)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addConversationMessageAsyncWithHttpInfo
     *
     * Add a message to a tracker
     *
     * @param  string $conversationId Id of the conversation (required)
     * @param  \FilippoToso\Rasa\Model\Message $message (required)
     * @param  string $includeEvents Specify which events of the tracker the response should contain. (optional, default to 'AFTER_RESTART')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addConversationMessageAsyncWithHttpInfo($conversationId, $message, $includeEvents = 'AFTER_RESTART')
    {
        $returnType = '\FilippoToso\Rasa\Model\Tracker';
        $request = $this->addConversationMessageRequest($conversationId, $message, $includeEvents);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addConversationMessage'
     *
     * @param  string $conversationId Id of the conversation (required)
     * @param  \FilippoToso\Rasa\Model\Message $message (required)
     * @param  string $includeEvents Specify which events of the tracker the response should contain. (optional, default to 'AFTER_RESTART')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addConversationMessageRequest($conversationId, $message, $includeEvents = 'AFTER_RESTART')
    {
        // verify the required parameter 'conversationId' is set
        if ($conversationId === null || (is_array($conversationId) && count($conversationId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $conversationId when calling addConversationMessage'
            );
        }
        // verify the required parameter 'message' is set
        if ($message === null || (is_array($message) && count($message) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $message when calling addConversationMessage'
            );
        }

        $resourcePath = '/conversations/{conversation_id}/messages';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($includeEvents !== null) {
            if('form' === 'form' && is_array($includeEvents)) {
                foreach($includeEvents as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['include_events'] = $includeEvents;
            }
        }


        // path params
        if ($conversationId !== null) {
            $resourcePath = str_replace(
                '{' . 'conversation_id' . '}',
                ObjectSerializer::toPathValue($conversationId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($message)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($message));
            } else {
                $httpBody = $message;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addConversationTrackerEvents
     *
     * Append events to a tracker
     *
     * @param  string $conversationId Id of the conversation (required)
     * @param  \FilippoToso\Rasa\Model\UNKNOWN_BASE_TYPE $uNKNOWNBASETYPE uNKNOWNBASETYPE (required)
     * @param  string $includeEvents Specify which events of the tracker the response should contain. (optional, default to 'AFTER_RESTART')
     * @param  string $outputChannel The bot&#39;s utterances will be forwarded to this channel. It uses the credentials listed in &#x60;credentials.yml&#x60; to connect. In case the channel does not support this, the utterances will be returned in the response body. Use &#x60;latest&#x60; to try to send the messages to the latest channel the user used. Currently supported channels are listed in the permitted values for the parameter. (optional)
     * @param  bool $executeSideEffects executeSideEffects (optional, default to false)
     *
     * @throws \FilippoToso\Rasa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FilippoToso\Rasa\Model\Tracker|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error
     */
    public function addConversationTrackerEvents($conversationId, $uNKNOWNBASETYPE, $includeEvents = 'AFTER_RESTART', $outputChannel = null, $executeSideEffects = false)
    {
        list($response) = $this->addConversationTrackerEventsWithHttpInfo($conversationId, $uNKNOWNBASETYPE, $includeEvents, $outputChannel, $executeSideEffects);
        return $response;
    }

    /**
     * Operation addConversationTrackerEventsWithHttpInfo
     *
     * Append events to a tracker
     *
     * @param  string $conversationId Id of the conversation (required)
     * @param  \FilippoToso\Rasa\Model\UNKNOWN_BASE_TYPE $uNKNOWNBASETYPE (required)
     * @param  string $includeEvents Specify which events of the tracker the response should contain. (optional, default to 'AFTER_RESTART')
     * @param  string $outputChannel The bot&#39;s utterances will be forwarded to this channel. It uses the credentials listed in &#x60;credentials.yml&#x60; to connect. In case the channel does not support this, the utterances will be returned in the response body. Use &#x60;latest&#x60; to try to send the messages to the latest channel the user used. Currently supported channels are listed in the permitted values for the parameter. (optional)
     * @param  bool $executeSideEffects (optional, default to false)
     *
     * @throws \FilippoToso\Rasa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FilippoToso\Rasa\Model\Tracker|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function addConversationTrackerEventsWithHttpInfo($conversationId, $uNKNOWNBASETYPE, $includeEvents = 'AFTER_RESTART', $outputChannel = null, $executeSideEffects = false)
    {
        $request = $this->addConversationTrackerEventsRequest($conversationId, $uNKNOWNBASETYPE, $includeEvents, $outputChannel, $executeSideEffects);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\FilippoToso\Rasa\Model\Tracker' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Tracker', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\FilippoToso\Rasa\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\FilippoToso\Rasa\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\FilippoToso\Rasa\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\FilippoToso\Rasa\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\FilippoToso\Rasa\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FilippoToso\Rasa\Model\Tracker';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Tracker',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addConversationTrackerEventsAsync
     *
     * Append events to a tracker
     *
     * @param  string $conversationId Id of the conversation (required)
     * @param  \FilippoToso\Rasa\Model\UNKNOWN_BASE_TYPE $uNKNOWNBASETYPE (required)
     * @param  string $includeEvents Specify which events of the tracker the response should contain. (optional, default to 'AFTER_RESTART')
     * @param  string $outputChannel The bot&#39;s utterances will be forwarded to this channel. It uses the credentials listed in &#x60;credentials.yml&#x60; to connect. In case the channel does not support this, the utterances will be returned in the response body. Use &#x60;latest&#x60; to try to send the messages to the latest channel the user used. Currently supported channels are listed in the permitted values for the parameter. (optional)
     * @param  bool $executeSideEffects (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addConversationTrackerEventsAsync($conversationId, $uNKNOWNBASETYPE, $includeEvents = 'AFTER_RESTART', $outputChannel = null, $executeSideEffects = false)
    {
        return $this->addConversationTrackerEventsAsyncWithHttpInfo($conversationId, $uNKNOWNBASETYPE, $includeEvents, $outputChannel, $executeSideEffects)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addConversationTrackerEventsAsyncWithHttpInfo
     *
     * Append events to a tracker
     *
     * @param  string $conversationId Id of the conversation (required)
     * @param  \FilippoToso\Rasa\Model\UNKNOWN_BASE_TYPE $uNKNOWNBASETYPE (required)
     * @param  string $includeEvents Specify which events of the tracker the response should contain. (optional, default to 'AFTER_RESTART')
     * @param  string $outputChannel The bot&#39;s utterances will be forwarded to this channel. It uses the credentials listed in &#x60;credentials.yml&#x60; to connect. In case the channel does not support this, the utterances will be returned in the response body. Use &#x60;latest&#x60; to try to send the messages to the latest channel the user used. Currently supported channels are listed in the permitted values for the parameter. (optional)
     * @param  bool $executeSideEffects (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addConversationTrackerEventsAsyncWithHttpInfo($conversationId, $uNKNOWNBASETYPE, $includeEvents = 'AFTER_RESTART', $outputChannel = null, $executeSideEffects = false)
    {
        $returnType = '\FilippoToso\Rasa\Model\Tracker';
        $request = $this->addConversationTrackerEventsRequest($conversationId, $uNKNOWNBASETYPE, $includeEvents, $outputChannel, $executeSideEffects);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addConversationTrackerEvents'
     *
     * @param  string $conversationId Id of the conversation (required)
     * @param  \FilippoToso\Rasa\Model\UNKNOWN_BASE_TYPE $uNKNOWNBASETYPE (required)
     * @param  string $includeEvents Specify which events of the tracker the response should contain. (optional, default to 'AFTER_RESTART')
     * @param  string $outputChannel The bot&#39;s utterances will be forwarded to this channel. It uses the credentials listed in &#x60;credentials.yml&#x60; to connect. In case the channel does not support this, the utterances will be returned in the response body. Use &#x60;latest&#x60; to try to send the messages to the latest channel the user used. Currently supported channels are listed in the permitted values for the parameter. (optional)
     * @param  bool $executeSideEffects (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function addConversationTrackerEventsRequest($conversationId, $uNKNOWNBASETYPE, $includeEvents = 'AFTER_RESTART', $outputChannel = null, $executeSideEffects = false)
    {
        // verify the required parameter 'conversationId' is set
        if ($conversationId === null || (is_array($conversationId) && count($conversationId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $conversationId when calling addConversationTrackerEvents'
            );
        }
        // verify the required parameter 'uNKNOWNBASETYPE' is set
        if ($uNKNOWNBASETYPE === null || (is_array($uNKNOWNBASETYPE) && count($uNKNOWNBASETYPE) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $uNKNOWNBASETYPE when calling addConversationTrackerEvents'
            );
        }

        $resourcePath = '/conversations/{conversation_id}/tracker/events';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($includeEvents !== null) {
            if('form' === 'form' && is_array($includeEvents)) {
                foreach($includeEvents as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['include_events'] = $includeEvents;
            }
        }
        // query params
        if ($outputChannel !== null) {
            if('form' === 'form' && is_array($outputChannel)) {
                foreach($outputChannel as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['output_channel'] = $outputChannel;
            }
        }
        // query params
        if ($executeSideEffects !== null) {
            if('form' === 'form' && is_array($executeSideEffects)) {
                foreach($executeSideEffects as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['execute_side_effects'] = $executeSideEffects;
            }
        }


        // path params
        if ($conversationId !== null) {
            $resourcePath = str_replace(
                '{' . 'conversation_id' . '}',
                ObjectSerializer::toPathValue($conversationId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($uNKNOWNBASETYPE)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($uNKNOWNBASETYPE));
            } else {
                $httpBody = $uNKNOWNBASETYPE;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation executeConversationAction
     *
     * Run an action in a conversation
     *
     * @param  string $conversationId Id of the conversation (required)
     * @param  \FilippoToso\Rasa\Model\ActionRequest $actionRequest actionRequest (required)
     * @param  string $includeEvents Specify which events of the tracker the response should contain. (optional, default to 'AFTER_RESTART')
     * @param  string $outputChannel The bot&#39;s utterances will be forwarded to this channel. It uses the credentials listed in &#x60;credentials.yml&#x60; to connect. In case the channel does not support this, the utterances will be returned in the response body. Use &#x60;latest&#x60; to try to send the messages to the latest channel the user used. Currently supported channels are listed in the permitted values for the parameter. (optional)
     *
     * @throws \FilippoToso\Rasa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FilippoToso\Rasa\Model\InlineResponse2002|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error
     */
    public function executeConversationAction($conversationId, $actionRequest, $includeEvents = 'AFTER_RESTART', $outputChannel = null)
    {
        list($response) = $this->executeConversationActionWithHttpInfo($conversationId, $actionRequest, $includeEvents, $outputChannel);
        return $response;
    }

    /**
     * Operation executeConversationActionWithHttpInfo
     *
     * Run an action in a conversation
     *
     * @param  string $conversationId Id of the conversation (required)
     * @param  \FilippoToso\Rasa\Model\ActionRequest $actionRequest (required)
     * @param  string $includeEvents Specify which events of the tracker the response should contain. (optional, default to 'AFTER_RESTART')
     * @param  string $outputChannel The bot&#39;s utterances will be forwarded to this channel. It uses the credentials listed in &#x60;credentials.yml&#x60; to connect. In case the channel does not support this, the utterances will be returned in the response body. Use &#x60;latest&#x60; to try to send the messages to the latest channel the user used. Currently supported channels are listed in the permitted values for the parameter. (optional)
     *
     * @throws \FilippoToso\Rasa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FilippoToso\Rasa\Model\InlineResponse2002|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function executeConversationActionWithHttpInfo($conversationId, $actionRequest, $includeEvents = 'AFTER_RESTART', $outputChannel = null)
    {
        $request = $this->executeConversationActionRequest($conversationId, $actionRequest, $includeEvents, $outputChannel);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\FilippoToso\Rasa\Model\InlineResponse2002' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\InlineResponse2002', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\FilippoToso\Rasa\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\FilippoToso\Rasa\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\FilippoToso\Rasa\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\FilippoToso\Rasa\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\FilippoToso\Rasa\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FilippoToso\Rasa\Model\InlineResponse2002';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\InlineResponse2002',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation executeConversationActionAsync
     *
     * Run an action in a conversation
     *
     * @param  string $conversationId Id of the conversation (required)
     * @param  \FilippoToso\Rasa\Model\ActionRequest $actionRequest (required)
     * @param  string $includeEvents Specify which events of the tracker the response should contain. (optional, default to 'AFTER_RESTART')
     * @param  string $outputChannel The bot&#39;s utterances will be forwarded to this channel. It uses the credentials listed in &#x60;credentials.yml&#x60; to connect. In case the channel does not support this, the utterances will be returned in the response body. Use &#x60;latest&#x60; to try to send the messages to the latest channel the user used. Currently supported channels are listed in the permitted values for the parameter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function executeConversationActionAsync($conversationId, $actionRequest, $includeEvents = 'AFTER_RESTART', $outputChannel = null)
    {
        return $this->executeConversationActionAsyncWithHttpInfo($conversationId, $actionRequest, $includeEvents, $outputChannel)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation executeConversationActionAsyncWithHttpInfo
     *
     * Run an action in a conversation
     *
     * @param  string $conversationId Id of the conversation (required)
     * @param  \FilippoToso\Rasa\Model\ActionRequest $actionRequest (required)
     * @param  string $includeEvents Specify which events of the tracker the response should contain. (optional, default to 'AFTER_RESTART')
     * @param  string $outputChannel The bot&#39;s utterances will be forwarded to this channel. It uses the credentials listed in &#x60;credentials.yml&#x60; to connect. In case the channel does not support this, the utterances will be returned in the response body. Use &#x60;latest&#x60; to try to send the messages to the latest channel the user used. Currently supported channels are listed in the permitted values for the parameter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function executeConversationActionAsyncWithHttpInfo($conversationId, $actionRequest, $includeEvents = 'AFTER_RESTART', $outputChannel = null)
    {
        $returnType = '\FilippoToso\Rasa\Model\InlineResponse2002';
        $request = $this->executeConversationActionRequest($conversationId, $actionRequest, $includeEvents, $outputChannel);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'executeConversationAction'
     *
     * @param  string $conversationId Id of the conversation (required)
     * @param  \FilippoToso\Rasa\Model\ActionRequest $actionRequest (required)
     * @param  string $includeEvents Specify which events of the tracker the response should contain. (optional, default to 'AFTER_RESTART')
     * @param  string $outputChannel The bot&#39;s utterances will be forwarded to this channel. It uses the credentials listed in &#x60;credentials.yml&#x60; to connect. In case the channel does not support this, the utterances will be returned in the response body. Use &#x60;latest&#x60; to try to send the messages to the latest channel the user used. Currently supported channels are listed in the permitted values for the parameter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function executeConversationActionRequest($conversationId, $actionRequest, $includeEvents = 'AFTER_RESTART', $outputChannel = null)
    {
        // verify the required parameter 'conversationId' is set
        if ($conversationId === null || (is_array($conversationId) && count($conversationId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $conversationId when calling executeConversationAction'
            );
        }
        // verify the required parameter 'actionRequest' is set
        if ($actionRequest === null || (is_array($actionRequest) && count($actionRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $actionRequest when calling executeConversationAction'
            );
        }

        $resourcePath = '/conversations/{conversation_id}/execute';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($includeEvents !== null) {
            if('form' === 'form' && is_array($includeEvents)) {
                foreach($includeEvents as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['include_events'] = $includeEvents;
            }
        }
        // query params
        if ($outputChannel !== null) {
            if('form' === 'form' && is_array($outputChannel)) {
                foreach($outputChannel as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['output_channel'] = $outputChannel;
            }
        }


        // path params
        if ($conversationId !== null) {
            $resourcePath = str_replace(
                '{' . 'conversation_id' . '}',
                ObjectSerializer::toPathValue($conversationId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($actionRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($actionRequest));
            } else {
                $httpBody = $actionRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getConversationStory
     *
     * Retrieve an end-to-end story corresponding to a conversation
     *
     * @param  string $conversationId Id of the conversation (required)
     * @param  float $until All events previous to the passed timestamp will be replayed. Events that occur exactly at the target time will be included. (optional)
     * @param  bool $allSessions Fetch test stories for all conversation sessions (optional, default to false)
     *
     * @throws \FilippoToso\Rasa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function getConversationStory($conversationId, $until = null, $allSessions = false)
    {
        $this->getConversationStoryWithHttpInfo($conversationId, $until, $allSessions);
    }

    /**
     * Operation getConversationStoryWithHttpInfo
     *
     * Retrieve an end-to-end story corresponding to a conversation
     *
     * @param  string $conversationId Id of the conversation (required)
     * @param  float $until All events previous to the passed timestamp will be replayed. Events that occur exactly at the target time will be included. (optional)
     * @param  bool $allSessions Fetch test stories for all conversation sessions (optional, default to false)
     *
     * @throws \FilippoToso\Rasa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function getConversationStoryWithHttpInfo($conversationId, $until = null, $allSessions = false)
    {
        $request = $this->getConversationStoryRequest($conversationId, $until, $allSessions);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getConversationStoryAsync
     *
     * Retrieve an end-to-end story corresponding to a conversation
     *
     * @param  string $conversationId Id of the conversation (required)
     * @param  float $until All events previous to the passed timestamp will be replayed. Events that occur exactly at the target time will be included. (optional)
     * @param  bool $allSessions Fetch test stories for all conversation sessions (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConversationStoryAsync($conversationId, $until = null, $allSessions = false)
    {
        return $this->getConversationStoryAsyncWithHttpInfo($conversationId, $until, $allSessions)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getConversationStoryAsyncWithHttpInfo
     *
     * Retrieve an end-to-end story corresponding to a conversation
     *
     * @param  string $conversationId Id of the conversation (required)
     * @param  float $until All events previous to the passed timestamp will be replayed. Events that occur exactly at the target time will be included. (optional)
     * @param  bool $allSessions Fetch test stories for all conversation sessions (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConversationStoryAsyncWithHttpInfo($conversationId, $until = null, $allSessions = false)
    {
        $returnType = '';
        $request = $this->getConversationStoryRequest($conversationId, $until, $allSessions);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getConversationStory'
     *
     * @param  string $conversationId Id of the conversation (required)
     * @param  float $until All events previous to the passed timestamp will be replayed. Events that occur exactly at the target time will be included. (optional)
     * @param  bool $allSessions Fetch test stories for all conversation sessions (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getConversationStoryRequest($conversationId, $until = null, $allSessions = false)
    {
        // verify the required parameter 'conversationId' is set
        if ($conversationId === null || (is_array($conversationId) && count($conversationId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $conversationId when calling getConversationStory'
            );
        }

        $resourcePath = '/conversations/{conversation_id}/story';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($until !== null) {
            if('form' === 'form' && is_array($until)) {
                foreach($until as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['until'] = $until;
            }
        }
        // query params
        if ($allSessions !== null) {
            if('form' === 'form' && is_array($allSessions)) {
                foreach($allSessions as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['all_sessions'] = $allSessions;
            }
        }


        // path params
        if ($conversationId !== null) {
            $resourcePath = str_replace(
                '{' . 'conversation_id' . '}',
                ObjectSerializer::toPathValue($conversationId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['text/yml', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['text/yml', 'application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getConversationTracker
     *
     * Retrieve a conversations tracker
     *
     * @param  string $conversationId Id of the conversation (required)
     * @param  string $includeEvents Specify which events of the tracker the response should contain. (optional, default to 'AFTER_RESTART')
     * @param  float $until All events previous to the passed timestamp will be replayed. Events that occur exactly at the target time will be included. (optional)
     *
     * @throws \FilippoToso\Rasa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FilippoToso\Rasa\Model\Tracker|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error
     */
    public function getConversationTracker($conversationId, $includeEvents = 'AFTER_RESTART', $until = null)
    {
        list($response) = $this->getConversationTrackerWithHttpInfo($conversationId, $includeEvents, $until);
        return $response;
    }

    /**
     * Operation getConversationTrackerWithHttpInfo
     *
     * Retrieve a conversations tracker
     *
     * @param  string $conversationId Id of the conversation (required)
     * @param  string $includeEvents Specify which events of the tracker the response should contain. (optional, default to 'AFTER_RESTART')
     * @param  float $until All events previous to the passed timestamp will be replayed. Events that occur exactly at the target time will be included. (optional)
     *
     * @throws \FilippoToso\Rasa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FilippoToso\Rasa\Model\Tracker|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getConversationTrackerWithHttpInfo($conversationId, $includeEvents = 'AFTER_RESTART', $until = null)
    {
        $request = $this->getConversationTrackerRequest($conversationId, $includeEvents, $until);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\FilippoToso\Rasa\Model\Tracker' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Tracker', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\FilippoToso\Rasa\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\FilippoToso\Rasa\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\FilippoToso\Rasa\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\FilippoToso\Rasa\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\FilippoToso\Rasa\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FilippoToso\Rasa\Model\Tracker';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Tracker',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getConversationTrackerAsync
     *
     * Retrieve a conversations tracker
     *
     * @param  string $conversationId Id of the conversation (required)
     * @param  string $includeEvents Specify which events of the tracker the response should contain. (optional, default to 'AFTER_RESTART')
     * @param  float $until All events previous to the passed timestamp will be replayed. Events that occur exactly at the target time will be included. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConversationTrackerAsync($conversationId, $includeEvents = 'AFTER_RESTART', $until = null)
    {
        return $this->getConversationTrackerAsyncWithHttpInfo($conversationId, $includeEvents, $until)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getConversationTrackerAsyncWithHttpInfo
     *
     * Retrieve a conversations tracker
     *
     * @param  string $conversationId Id of the conversation (required)
     * @param  string $includeEvents Specify which events of the tracker the response should contain. (optional, default to 'AFTER_RESTART')
     * @param  float $until All events previous to the passed timestamp will be replayed. Events that occur exactly at the target time will be included. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConversationTrackerAsyncWithHttpInfo($conversationId, $includeEvents = 'AFTER_RESTART', $until = null)
    {
        $returnType = '\FilippoToso\Rasa\Model\Tracker';
        $request = $this->getConversationTrackerRequest($conversationId, $includeEvents, $until);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getConversationTracker'
     *
     * @param  string $conversationId Id of the conversation (required)
     * @param  string $includeEvents Specify which events of the tracker the response should contain. (optional, default to 'AFTER_RESTART')
     * @param  float $until All events previous to the passed timestamp will be replayed. Events that occur exactly at the target time will be included. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getConversationTrackerRequest($conversationId, $includeEvents = 'AFTER_RESTART', $until = null)
    {
        // verify the required parameter 'conversationId' is set
        if ($conversationId === null || (is_array($conversationId) && count($conversationId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $conversationId when calling getConversationTracker'
            );
        }

        $resourcePath = '/conversations/{conversation_id}/tracker';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($includeEvents !== null) {
            if('form' === 'form' && is_array($includeEvents)) {
                foreach($includeEvents as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['include_events'] = $includeEvents;
            }
        }
        // query params
        if ($until !== null) {
            if('form' === 'form' && is_array($until)) {
                foreach($until as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['until'] = $until;
            }
        }


        // path params
        if ($conversationId !== null) {
            $resourcePath = str_replace(
                '{' . 'conversation_id' . '}',
                ObjectSerializer::toPathValue($conversationId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation predictConversationAction
     *
     * Predict the next action
     *
     * @param  string $conversationId Id of the conversation (required)
     *
     * @throws \FilippoToso\Rasa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FilippoToso\Rasa\Model\PredictResult|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error
     */
    public function predictConversationAction($conversationId)
    {
        list($response) = $this->predictConversationActionWithHttpInfo($conversationId);
        return $response;
    }

    /**
     * Operation predictConversationActionWithHttpInfo
     *
     * Predict the next action
     *
     * @param  string $conversationId Id of the conversation (required)
     *
     * @throws \FilippoToso\Rasa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FilippoToso\Rasa\Model\PredictResult|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function predictConversationActionWithHttpInfo($conversationId)
    {
        $request = $this->predictConversationActionRequest($conversationId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\FilippoToso\Rasa\Model\PredictResult' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\PredictResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\FilippoToso\Rasa\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\FilippoToso\Rasa\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\FilippoToso\Rasa\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\FilippoToso\Rasa\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\FilippoToso\Rasa\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FilippoToso\Rasa\Model\PredictResult';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\PredictResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation predictConversationActionAsync
     *
     * Predict the next action
     *
     * @param  string $conversationId Id of the conversation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function predictConversationActionAsync($conversationId)
    {
        return $this->predictConversationActionAsyncWithHttpInfo($conversationId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation predictConversationActionAsyncWithHttpInfo
     *
     * Predict the next action
     *
     * @param  string $conversationId Id of the conversation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function predictConversationActionAsyncWithHttpInfo($conversationId)
    {
        $returnType = '\FilippoToso\Rasa\Model\PredictResult';
        $request = $this->predictConversationActionRequest($conversationId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'predictConversationAction'
     *
     * @param  string $conversationId Id of the conversation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function predictConversationActionRequest($conversationId)
    {
        // verify the required parameter 'conversationId' is set
        if ($conversationId === null || (is_array($conversationId) && count($conversationId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $conversationId when calling predictConversationAction'
            );
        }

        $resourcePath = '/conversations/{conversation_id}/predict';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($conversationId !== null) {
            $resourcePath = str_replace(
                '{' . 'conversation_id' . '}',
                ObjectSerializer::toPathValue($conversationId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation replaceConversationTrackerEvents
     *
     * Replace a trackers events
     *
     * @param  string $conversationId Id of the conversation (required)
     * @param  \FilippoToso\Rasa\Model\Event[] $event event (required)
     * @param  string $includeEvents Specify which events of the tracker the response should contain. (optional, default to 'AFTER_RESTART')
     *
     * @throws \FilippoToso\Rasa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FilippoToso\Rasa\Model\Tracker|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error
     */
    public function replaceConversationTrackerEvents($conversationId, $event, $includeEvents = 'AFTER_RESTART')
    {
        list($response) = $this->replaceConversationTrackerEventsWithHttpInfo($conversationId, $event, $includeEvents);
        return $response;
    }

    /**
     * Operation replaceConversationTrackerEventsWithHttpInfo
     *
     * Replace a trackers events
     *
     * @param  string $conversationId Id of the conversation (required)
     * @param  \FilippoToso\Rasa\Model\Event[] $event (required)
     * @param  string $includeEvents Specify which events of the tracker the response should contain. (optional, default to 'AFTER_RESTART')
     *
     * @throws \FilippoToso\Rasa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FilippoToso\Rasa\Model\Tracker|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function replaceConversationTrackerEventsWithHttpInfo($conversationId, $event, $includeEvents = 'AFTER_RESTART')
    {
        $request = $this->replaceConversationTrackerEventsRequest($conversationId, $event, $includeEvents);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\FilippoToso\Rasa\Model\Tracker' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Tracker', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\FilippoToso\Rasa\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\FilippoToso\Rasa\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\FilippoToso\Rasa\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\FilippoToso\Rasa\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\FilippoToso\Rasa\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FilippoToso\Rasa\Model\Tracker';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Tracker',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation replaceConversationTrackerEventsAsync
     *
     * Replace a trackers events
     *
     * @param  string $conversationId Id of the conversation (required)
     * @param  \FilippoToso\Rasa\Model\Event[] $event (required)
     * @param  string $includeEvents Specify which events of the tracker the response should contain. (optional, default to 'AFTER_RESTART')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function replaceConversationTrackerEventsAsync($conversationId, $event, $includeEvents = 'AFTER_RESTART')
    {
        return $this->replaceConversationTrackerEventsAsyncWithHttpInfo($conversationId, $event, $includeEvents)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation replaceConversationTrackerEventsAsyncWithHttpInfo
     *
     * Replace a trackers events
     *
     * @param  string $conversationId Id of the conversation (required)
     * @param  \FilippoToso\Rasa\Model\Event[] $event (required)
     * @param  string $includeEvents Specify which events of the tracker the response should contain. (optional, default to 'AFTER_RESTART')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function replaceConversationTrackerEventsAsyncWithHttpInfo($conversationId, $event, $includeEvents = 'AFTER_RESTART')
    {
        $returnType = '\FilippoToso\Rasa\Model\Tracker';
        $request = $this->replaceConversationTrackerEventsRequest($conversationId, $event, $includeEvents);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'replaceConversationTrackerEvents'
     *
     * @param  string $conversationId Id of the conversation (required)
     * @param  \FilippoToso\Rasa\Model\Event[] $event (required)
     * @param  string $includeEvents Specify which events of the tracker the response should contain. (optional, default to 'AFTER_RESTART')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function replaceConversationTrackerEventsRequest($conversationId, $event, $includeEvents = 'AFTER_RESTART')
    {
        // verify the required parameter 'conversationId' is set
        if ($conversationId === null || (is_array($conversationId) && count($conversationId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $conversationId when calling replaceConversationTrackerEvents'
            );
        }
        // verify the required parameter 'event' is set
        if ($event === null || (is_array($event) && count($event) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event when calling replaceConversationTrackerEvents'
            );
        }

        $resourcePath = '/conversations/{conversation_id}/tracker/events';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($includeEvents !== null) {
            if('form' === 'form' && is_array($includeEvents)) {
                foreach($includeEvents as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['include_events'] = $includeEvents;
            }
        }


        // path params
        if ($conversationId !== null) {
            $resourcePath = str_replace(
                '{' . 'conversation_id' . '}',
                ObjectSerializer::toPathValue($conversationId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($event)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($event));
            } else {
                $httpBody = $event;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation triggerConversationIntent
     *
     * Inject an intent into a conversation
     *
     * @param  string $conversationId Id of the conversation (required)
     * @param  \FilippoToso\Rasa\Model\IntentTriggerRequest $intentTriggerRequest intentTriggerRequest (required)
     * @param  string $includeEvents Specify which events of the tracker the response should contain. (optional, default to 'AFTER_RESTART')
     * @param  string $outputChannel The bot&#39;s utterances will be forwarded to this channel. It uses the credentials listed in &#x60;credentials.yml&#x60; to connect. In case the channel does not support this, the utterances will be returned in the response body. Use &#x60;latest&#x60; to try to send the messages to the latest channel the user used. Currently supported channels are listed in the permitted values for the parameter. (optional)
     *
     * @throws \FilippoToso\Rasa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FilippoToso\Rasa\Model\InlineResponse2002|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error
     */
    public function triggerConversationIntent($conversationId, $intentTriggerRequest, $includeEvents = 'AFTER_RESTART', $outputChannel = null)
    {
        list($response) = $this->triggerConversationIntentWithHttpInfo($conversationId, $intentTriggerRequest, $includeEvents, $outputChannel);
        return $response;
    }

    /**
     * Operation triggerConversationIntentWithHttpInfo
     *
     * Inject an intent into a conversation
     *
     * @param  string $conversationId Id of the conversation (required)
     * @param  \FilippoToso\Rasa\Model\IntentTriggerRequest $intentTriggerRequest (required)
     * @param  string $includeEvents Specify which events of the tracker the response should contain. (optional, default to 'AFTER_RESTART')
     * @param  string $outputChannel The bot&#39;s utterances will be forwarded to this channel. It uses the credentials listed in &#x60;credentials.yml&#x60; to connect. In case the channel does not support this, the utterances will be returned in the response body. Use &#x60;latest&#x60; to try to send the messages to the latest channel the user used. Currently supported channels are listed in the permitted values for the parameter. (optional)
     *
     * @throws \FilippoToso\Rasa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FilippoToso\Rasa\Model\InlineResponse2002|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function triggerConversationIntentWithHttpInfo($conversationId, $intentTriggerRequest, $includeEvents = 'AFTER_RESTART', $outputChannel = null)
    {
        $request = $this->triggerConversationIntentRequest($conversationId, $intentTriggerRequest, $includeEvents, $outputChannel);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\FilippoToso\Rasa\Model\InlineResponse2002' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\InlineResponse2002', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\FilippoToso\Rasa\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\FilippoToso\Rasa\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\FilippoToso\Rasa\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\FilippoToso\Rasa\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\FilippoToso\Rasa\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FilippoToso\Rasa\Model\InlineResponse2002';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\InlineResponse2002',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation triggerConversationIntentAsync
     *
     * Inject an intent into a conversation
     *
     * @param  string $conversationId Id of the conversation (required)
     * @param  \FilippoToso\Rasa\Model\IntentTriggerRequest $intentTriggerRequest (required)
     * @param  string $includeEvents Specify which events of the tracker the response should contain. (optional, default to 'AFTER_RESTART')
     * @param  string $outputChannel The bot&#39;s utterances will be forwarded to this channel. It uses the credentials listed in &#x60;credentials.yml&#x60; to connect. In case the channel does not support this, the utterances will be returned in the response body. Use &#x60;latest&#x60; to try to send the messages to the latest channel the user used. Currently supported channels are listed in the permitted values for the parameter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function triggerConversationIntentAsync($conversationId, $intentTriggerRequest, $includeEvents = 'AFTER_RESTART', $outputChannel = null)
    {
        return $this->triggerConversationIntentAsyncWithHttpInfo($conversationId, $intentTriggerRequest, $includeEvents, $outputChannel)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation triggerConversationIntentAsyncWithHttpInfo
     *
     * Inject an intent into a conversation
     *
     * @param  string $conversationId Id of the conversation (required)
     * @param  \FilippoToso\Rasa\Model\IntentTriggerRequest $intentTriggerRequest (required)
     * @param  string $includeEvents Specify which events of the tracker the response should contain. (optional, default to 'AFTER_RESTART')
     * @param  string $outputChannel The bot&#39;s utterances will be forwarded to this channel. It uses the credentials listed in &#x60;credentials.yml&#x60; to connect. In case the channel does not support this, the utterances will be returned in the response body. Use &#x60;latest&#x60; to try to send the messages to the latest channel the user used. Currently supported channels are listed in the permitted values for the parameter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function triggerConversationIntentAsyncWithHttpInfo($conversationId, $intentTriggerRequest, $includeEvents = 'AFTER_RESTART', $outputChannel = null)
    {
        $returnType = '\FilippoToso\Rasa\Model\InlineResponse2002';
        $request = $this->triggerConversationIntentRequest($conversationId, $intentTriggerRequest, $includeEvents, $outputChannel);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'triggerConversationIntent'
     *
     * @param  string $conversationId Id of the conversation (required)
     * @param  \FilippoToso\Rasa\Model\IntentTriggerRequest $intentTriggerRequest (required)
     * @param  string $includeEvents Specify which events of the tracker the response should contain. (optional, default to 'AFTER_RESTART')
     * @param  string $outputChannel The bot&#39;s utterances will be forwarded to this channel. It uses the credentials listed in &#x60;credentials.yml&#x60; to connect. In case the channel does not support this, the utterances will be returned in the response body. Use &#x60;latest&#x60; to try to send the messages to the latest channel the user used. Currently supported channels are listed in the permitted values for the parameter. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function triggerConversationIntentRequest($conversationId, $intentTriggerRequest, $includeEvents = 'AFTER_RESTART', $outputChannel = null)
    {
        // verify the required parameter 'conversationId' is set
        if ($conversationId === null || (is_array($conversationId) && count($conversationId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $conversationId when calling triggerConversationIntent'
            );
        }
        // verify the required parameter 'intentTriggerRequest' is set
        if ($intentTriggerRequest === null || (is_array($intentTriggerRequest) && count($intentTriggerRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $intentTriggerRequest when calling triggerConversationIntent'
            );
        }

        $resourcePath = '/conversations/{conversation_id}/trigger_intent';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($includeEvents !== null) {
            if('form' === 'form' && is_array($includeEvents)) {
                foreach($includeEvents as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['include_events'] = $includeEvents;
            }
        }
        // query params
        if ($outputChannel !== null) {
            if('form' === 'form' && is_array($outputChannel)) {
                foreach($outputChannel as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['output_channel'] = $outputChannel;
            }
        }


        // path params
        if ($conversationId !== null) {
            $resourcePath = str_replace(
                '{' . 'conversation_id' . '}',
                ObjectSerializer::toPathValue($conversationId),
                $resourcePath
            );
        }


        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($intentTriggerRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($intentTriggerRequest));
            } else {
                $httpBody = $intentTriggerRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
