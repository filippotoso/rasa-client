<?php
/**
 * ModelApi
 * PHP version 7.2
 *
 * @category Class
 * @package  FilippoToso\Rasa
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Rasa - Server Endpoints
 *
 * The Rasa server provides endpoints to retrieve trackers of conversations as well as endpoints to modify them. Additionally, endpoints for training and testing models are provided.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FilippoToso\Rasa\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use FilippoToso\Rasa\ApiException;
use FilippoToso\Rasa\Configuration;
use FilippoToso\Rasa\HeaderSelector;
use FilippoToso\Rasa\ObjectSerializer;

/**
 * ModelApi Class Doc Comment
 *
 * @category Class
 * @package  FilippoToso\Rasa
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ModelApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation parseModelMessage
     *
     * Parse a message using the Rasa model
     *
     * @param  \FilippoToso\Rasa\Model\InlineObject1 $inlineObject1 inlineObject1 (required)
     * @param  string $emulationMode Specify the emulation mode. (optional)
     *
     * @throws \FilippoToso\Rasa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FilippoToso\Rasa\Model\ParseResult|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error
     */
    public function parseModelMessage($inlineObject1, $emulationMode = null)
    {
        list($response) = $this->parseModelMessageWithHttpInfo($inlineObject1, $emulationMode);
        return $response;
    }

    /**
     * Operation parseModelMessageWithHttpInfo
     *
     * Parse a message using the Rasa model
     *
     * @param  \FilippoToso\Rasa\Model\InlineObject1 $inlineObject1 (required)
     * @param  string $emulationMode Specify the emulation mode. (optional)
     *
     * @throws \FilippoToso\Rasa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FilippoToso\Rasa\Model\ParseResult|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function parseModelMessageWithHttpInfo($inlineObject1, $emulationMode = null)
    {
        $request = $this->parseModelMessageRequest($inlineObject1, $emulationMode);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\FilippoToso\Rasa\Model\ParseResult' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\ParseResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\FilippoToso\Rasa\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\FilippoToso\Rasa\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\FilippoToso\Rasa\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\FilippoToso\Rasa\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FilippoToso\Rasa\Model\ParseResult';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\ParseResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation parseModelMessageAsync
     *
     * Parse a message using the Rasa model
     *
     * @param  \FilippoToso\Rasa\Model\InlineObject1 $inlineObject1 (required)
     * @param  string $emulationMode Specify the emulation mode. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function parseModelMessageAsync($inlineObject1, $emulationMode = null)
    {
        return $this->parseModelMessageAsyncWithHttpInfo($inlineObject1, $emulationMode)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation parseModelMessageAsyncWithHttpInfo
     *
     * Parse a message using the Rasa model
     *
     * @param  \FilippoToso\Rasa\Model\InlineObject1 $inlineObject1 (required)
     * @param  string $emulationMode Specify the emulation mode. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function parseModelMessageAsyncWithHttpInfo($inlineObject1, $emulationMode = null)
    {
        $returnType = '\FilippoToso\Rasa\Model\ParseResult';
        $request = $this->parseModelMessageRequest($inlineObject1, $emulationMode);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'parseModelMessage'
     *
     * @param  \FilippoToso\Rasa\Model\InlineObject1 $inlineObject1 (required)
     * @param  string $emulationMode Specify the emulation mode. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function parseModelMessageRequest($inlineObject1, $emulationMode = null)
    {
        // verify the required parameter 'inlineObject1' is set
        if ($inlineObject1 === null || (is_array($inlineObject1) && count($inlineObject1) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inlineObject1 when calling parseModelMessage'
            );
        }

        $resourcePath = '/model/parse';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($emulationMode !== null) {
            if('form' === 'form' && is_array($emulationMode)) {
                foreach($emulationMode as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['emulation_mode'] = $emulationMode;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($inlineObject1)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($inlineObject1));
            } else {
                $httpBody = $inlineObject1;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation predictModelAction
     *
     * Predict an action on a temporary state
     *
     * @param  \FilippoToso\Rasa\Model\Event[] $event event (required)
     * @param  string $includeEvents Specify which events of the tracker the response should contain. (optional, default to 'AFTER_RESTART')
     *
     * @throws \FilippoToso\Rasa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FilippoToso\Rasa\Model\PredictResult|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error
     */
    public function predictModelAction($event, $includeEvents = 'AFTER_RESTART')
    {
        list($response) = $this->predictModelActionWithHttpInfo($event, $includeEvents);
        return $response;
    }

    /**
     * Operation predictModelActionWithHttpInfo
     *
     * Predict an action on a temporary state
     *
     * @param  \FilippoToso\Rasa\Model\Event[] $event (required)
     * @param  string $includeEvents Specify which events of the tracker the response should contain. (optional, default to 'AFTER_RESTART')
     *
     * @throws \FilippoToso\Rasa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FilippoToso\Rasa\Model\PredictResult|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function predictModelActionWithHttpInfo($event, $includeEvents = 'AFTER_RESTART')
    {
        $request = $this->predictModelActionRequest($event, $includeEvents);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\FilippoToso\Rasa\Model\PredictResult' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\PredictResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\FilippoToso\Rasa\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\FilippoToso\Rasa\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\FilippoToso\Rasa\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\FilippoToso\Rasa\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\FilippoToso\Rasa\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FilippoToso\Rasa\Model\PredictResult';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\PredictResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation predictModelActionAsync
     *
     * Predict an action on a temporary state
     *
     * @param  \FilippoToso\Rasa\Model\Event[] $event (required)
     * @param  string $includeEvents Specify which events of the tracker the response should contain. (optional, default to 'AFTER_RESTART')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function predictModelActionAsync($event, $includeEvents = 'AFTER_RESTART')
    {
        return $this->predictModelActionAsyncWithHttpInfo($event, $includeEvents)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation predictModelActionAsyncWithHttpInfo
     *
     * Predict an action on a temporary state
     *
     * @param  \FilippoToso\Rasa\Model\Event[] $event (required)
     * @param  string $includeEvents Specify which events of the tracker the response should contain. (optional, default to 'AFTER_RESTART')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function predictModelActionAsyncWithHttpInfo($event, $includeEvents = 'AFTER_RESTART')
    {
        $returnType = '\FilippoToso\Rasa\Model\PredictResult';
        $request = $this->predictModelActionRequest($event, $includeEvents);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'predictModelAction'
     *
     * @param  \FilippoToso\Rasa\Model\Event[] $event (required)
     * @param  string $includeEvents Specify which events of the tracker the response should contain. (optional, default to 'AFTER_RESTART')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function predictModelActionRequest($event, $includeEvents = 'AFTER_RESTART')
    {
        // verify the required parameter 'event' is set
        if ($event === null || (is_array($event) && count($event) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $event when calling predictModelAction'
            );
        }

        $resourcePath = '/model/predict';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($includeEvents !== null) {
            if('form' === 'form' && is_array($includeEvents)) {
                foreach($includeEvents as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['include_events'] = $includeEvents;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($event)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($event));
            } else {
                $httpBody = $event;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation replaceModel
     *
     * Replace the currently loaded model
     *
     * @param  \FilippoToso\Rasa\Model\ModelRequest $modelRequest modelRequest (required)
     *
     * @throws \FilippoToso\Rasa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function replaceModel($modelRequest)
    {
        $this->replaceModelWithHttpInfo($modelRequest);
    }

    /**
     * Operation replaceModelWithHttpInfo
     *
     * Replace the currently loaded model
     *
     * @param  \FilippoToso\Rasa\Model\ModelRequest $modelRequest (required)
     *
     * @throws \FilippoToso\Rasa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function replaceModelWithHttpInfo($modelRequest)
    {
        $request = $this->replaceModelRequest($modelRequest);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation replaceModelAsync
     *
     * Replace the currently loaded model
     *
     * @param  \FilippoToso\Rasa\Model\ModelRequest $modelRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function replaceModelAsync($modelRequest)
    {
        return $this->replaceModelAsyncWithHttpInfo($modelRequest)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation replaceModelAsyncWithHttpInfo
     *
     * Replace the currently loaded model
     *
     * @param  \FilippoToso\Rasa\Model\ModelRequest $modelRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function replaceModelAsyncWithHttpInfo($modelRequest)
    {
        $returnType = '';
        $request = $this->replaceModelRequest($modelRequest);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'replaceModel'
     *
     * @param  \FilippoToso\Rasa\Model\ModelRequest $modelRequest (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function replaceModelRequest($modelRequest)
    {
        // verify the required parameter 'modelRequest' is set
        if ($modelRequest === null || (is_array($modelRequest) && count($modelRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $modelRequest when calling replaceModel'
            );
        }

        $resourcePath = '/model';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($modelRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($modelRequest));
            } else {
                $httpBody = $modelRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation testModelIntent
     *
     * Perform an intent evaluation
     *
     * @param  \FilippoToso\Rasa\Model\InlineObject $inlineObject inlineObject (required)
     * @param  string $model Model that should be used for evaluation. If the parameter is set, the model will be fetched with the currently loaded configuration setup. However, the currently loaded model will not be updated. The state of the server will not change. If the parameter is not set, the currently loaded model will be used for the evaluation. (optional)
     * @param  string $callbackUrl If specified the call will return immediately with an empty response and status code 204. The actual result or any errors will be sent to the given callback URL as the body of a post request. (optional, default to 'None')
     * @param  int $crossValidationFolds crossValidationFolds (optional)
     *
     * @throws \FilippoToso\Rasa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FilippoToso\Rasa\Model\NLUEvaluationResult|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error
     */
    public function testModelIntent($inlineObject, $model = null, $callbackUrl = 'None', $crossValidationFolds = null)
    {
        list($response) = $this->testModelIntentWithHttpInfo($inlineObject, $model, $callbackUrl, $crossValidationFolds);
        return $response;
    }

    /**
     * Operation testModelIntentWithHttpInfo
     *
     * Perform an intent evaluation
     *
     * @param  \FilippoToso\Rasa\Model\InlineObject $inlineObject (required)
     * @param  string $model Model that should be used for evaluation. If the parameter is set, the model will be fetched with the currently loaded configuration setup. However, the currently loaded model will not be updated. The state of the server will not change. If the parameter is not set, the currently loaded model will be used for the evaluation. (optional)
     * @param  string $callbackUrl If specified the call will return immediately with an empty response and status code 204. The actual result or any errors will be sent to the given callback URL as the body of a post request. (optional, default to 'None')
     * @param  int $crossValidationFolds (optional)
     *
     * @throws \FilippoToso\Rasa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FilippoToso\Rasa\Model\NLUEvaluationResult|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function testModelIntentWithHttpInfo($inlineObject, $model = null, $callbackUrl = 'None', $crossValidationFolds = null)
    {
        $request = $this->testModelIntentRequest($inlineObject, $model, $callbackUrl, $crossValidationFolds);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\FilippoToso\Rasa\Model\NLUEvaluationResult' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\NLUEvaluationResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\FilippoToso\Rasa\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\FilippoToso\Rasa\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\FilippoToso\Rasa\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\FilippoToso\Rasa\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\FilippoToso\Rasa\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FilippoToso\Rasa\Model\NLUEvaluationResult';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\NLUEvaluationResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation testModelIntentAsync
     *
     * Perform an intent evaluation
     *
     * @param  \FilippoToso\Rasa\Model\InlineObject $inlineObject (required)
     * @param  string $model Model that should be used for evaluation. If the parameter is set, the model will be fetched with the currently loaded configuration setup. However, the currently loaded model will not be updated. The state of the server will not change. If the parameter is not set, the currently loaded model will be used for the evaluation. (optional)
     * @param  string $callbackUrl If specified the call will return immediately with an empty response and status code 204. The actual result or any errors will be sent to the given callback URL as the body of a post request. (optional, default to 'None')
     * @param  int $crossValidationFolds (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function testModelIntentAsync($inlineObject, $model = null, $callbackUrl = 'None', $crossValidationFolds = null)
    {
        return $this->testModelIntentAsyncWithHttpInfo($inlineObject, $model, $callbackUrl, $crossValidationFolds)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation testModelIntentAsyncWithHttpInfo
     *
     * Perform an intent evaluation
     *
     * @param  \FilippoToso\Rasa\Model\InlineObject $inlineObject (required)
     * @param  string $model Model that should be used for evaluation. If the parameter is set, the model will be fetched with the currently loaded configuration setup. However, the currently loaded model will not be updated. The state of the server will not change. If the parameter is not set, the currently loaded model will be used for the evaluation. (optional)
     * @param  string $callbackUrl If specified the call will return immediately with an empty response and status code 204. The actual result or any errors will be sent to the given callback URL as the body of a post request. (optional, default to 'None')
     * @param  int $crossValidationFolds (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function testModelIntentAsyncWithHttpInfo($inlineObject, $model = null, $callbackUrl = 'None', $crossValidationFolds = null)
    {
        $returnType = '\FilippoToso\Rasa\Model\NLUEvaluationResult';
        $request = $this->testModelIntentRequest($inlineObject, $model, $callbackUrl, $crossValidationFolds);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'testModelIntent'
     *
     * @param  \FilippoToso\Rasa\Model\InlineObject $inlineObject (required)
     * @param  string $model Model that should be used for evaluation. If the parameter is set, the model will be fetched with the currently loaded configuration setup. However, the currently loaded model will not be updated. The state of the server will not change. If the parameter is not set, the currently loaded model will be used for the evaluation. (optional)
     * @param  string $callbackUrl If specified the call will return immediately with an empty response and status code 204. The actual result or any errors will be sent to the given callback URL as the body of a post request. (optional, default to 'None')
     * @param  int $crossValidationFolds (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function testModelIntentRequest($inlineObject, $model = null, $callbackUrl = 'None', $crossValidationFolds = null)
    {
        // verify the required parameter 'inlineObject' is set
        if ($inlineObject === null || (is_array($inlineObject) && count($inlineObject) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inlineObject when calling testModelIntent'
            );
        }

        $resourcePath = '/model/test/intents';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($model !== null) {
            if('form' === 'form' && is_array($model)) {
                foreach($model as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['model'] = $model;
            }
        }
        // query params
        if ($callbackUrl !== null) {
            if('form' === 'form' && is_array($callbackUrl)) {
                foreach($callbackUrl as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['callback_url'] = $callbackUrl;
            }
        }
        // query params
        if ($crossValidationFolds !== null) {
            if('form' === 'form' && is_array($crossValidationFolds)) {
                foreach($crossValidationFolds as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['cross_validation_folds'] = $crossValidationFolds;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json', 'application/x-yaml']
            );
        }

        // for model (json/xml)
        if (isset($inlineObject)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($inlineObject));
            } else {
                $httpBody = $inlineObject;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation testModelStories
     *
     * Evaluate stories
     *
     * @param  string $body body (required)
     * @param  bool $e2e Perform an end-to-end evaluation on the posted stories. (optional, default to false)
     *
     * @throws \FilippoToso\Rasa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \FilippoToso\Rasa\Model\EvaluationStoriesResult|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error
     */
    public function testModelStories($body, $e2e = false)
    {
        list($response) = $this->testModelStoriesWithHttpInfo($body, $e2e);
        return $response;
    }

    /**
     * Operation testModelStoriesWithHttpInfo
     *
     * Evaluate stories
     *
     * @param  string $body (required)
     * @param  bool $e2e Perform an end-to-end evaluation on the posted stories. (optional, default to false)
     *
     * @throws \FilippoToso\Rasa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \FilippoToso\Rasa\Model\EvaluationStoriesResult|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function testModelStoriesWithHttpInfo($body, $e2e = false)
    {
        $request = $this->testModelStoriesRequest($body, $e2e);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\FilippoToso\Rasa\Model\EvaluationStoriesResult' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\EvaluationStoriesResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\FilippoToso\Rasa\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\FilippoToso\Rasa\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\FilippoToso\Rasa\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\FilippoToso\Rasa\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\FilippoToso\Rasa\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\FilippoToso\Rasa\Model\EvaluationStoriesResult';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\EvaluationStoriesResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation testModelStoriesAsync
     *
     * Evaluate stories
     *
     * @param  string $body (required)
     * @param  bool $e2e Perform an end-to-end evaluation on the posted stories. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function testModelStoriesAsync($body, $e2e = false)
    {
        return $this->testModelStoriesAsyncWithHttpInfo($body, $e2e)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation testModelStoriesAsyncWithHttpInfo
     *
     * Evaluate stories
     *
     * @param  string $body (required)
     * @param  bool $e2e Perform an end-to-end evaluation on the posted stories. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function testModelStoriesAsyncWithHttpInfo($body, $e2e = false)
    {
        $returnType = '\FilippoToso\Rasa\Model\EvaluationStoriesResult';
        $request = $this->testModelStoriesRequest($body, $e2e);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'testModelStories'
     *
     * @param  string $body (required)
     * @param  bool $e2e Perform an end-to-end evaluation on the posted stories. (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function testModelStoriesRequest($body, $e2e = false)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling testModelStories'
            );
        }

        $resourcePath = '/model/test/stories';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($e2e !== null) {
            if('form' === 'form' && is_array($e2e)) {
                foreach($e2e as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['e2e'] = $e2e;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['text/yml']
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation trainModel
     *
     * Train a Rasa model
     *
     * @param  \FilippoToso\Rasa\Model\JSONTrainingRequest $jSONTrainingRequest The training data can either be in YAML format or a JSON which contains Rasa training data in YAML format for each required key. (required)
     * @param  bool $saveToDefaultModelDirectory saveToDefaultModelDirectory (optional, default to true)
     * @param  bool $forceTraining forceTraining (optional, default to false)
     * @param  string $augmentation augmentation (optional, default to '50')
     * @param  string $numThreads numThreads (optional, default to '1')
     * @param  string $callbackUrl If specified the call will return immediately with an empty response and status code 204. The actual result or any errors will be sent to the given callback URL as the body of a post request. (optional, default to 'None')
     *
     * @throws \FilippoToso\Rasa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \SplFileObject|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error
     */
    public function trainModel($jSONTrainingRequest, $saveToDefaultModelDirectory = true, $forceTraining = false, $augmentation = '50', $numThreads = '1', $callbackUrl = 'None')
    {
        list($response) = $this->trainModelWithHttpInfo($jSONTrainingRequest, $saveToDefaultModelDirectory, $forceTraining, $augmentation, $numThreads, $callbackUrl);
        return $response;
    }

    /**
     * Operation trainModelWithHttpInfo
     *
     * Train a Rasa model
     *
     * @param  \FilippoToso\Rasa\Model\JSONTrainingRequest $jSONTrainingRequest The training data can either be in YAML format or a JSON which contains Rasa training data in YAML format for each required key. (required)
     * @param  bool $saveToDefaultModelDirectory (optional, default to true)
     * @param  bool $forceTraining (optional, default to false)
     * @param  string $augmentation (optional, default to '50')
     * @param  string $numThreads (optional, default to '1')
     * @param  string $callbackUrl If specified the call will return immediately with an empty response and status code 204. The actual result or any errors will be sent to the given callback URL as the body of a post request. (optional, default to 'None')
     *
     * @throws \FilippoToso\Rasa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error|\FilippoToso\Rasa\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function trainModelWithHttpInfo($jSONTrainingRequest, $saveToDefaultModelDirectory = true, $forceTraining = false, $augmentation = '50', $numThreads = '1', $callbackUrl = 'None')
    {
        $request = $this->trainModelRequest($jSONTrainingRequest, $saveToDefaultModelDirectory, $forceTraining, $augmentation, $numThreads, $callbackUrl);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\FilippoToso\Rasa\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\FilippoToso\Rasa\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\FilippoToso\Rasa\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\FilippoToso\Rasa\Model\Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\FilippoToso\Rasa\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation trainModelAsync
     *
     * Train a Rasa model
     *
     * @param  \FilippoToso\Rasa\Model\JSONTrainingRequest $jSONTrainingRequest The training data can either be in YAML format or a JSON which contains Rasa training data in YAML format for each required key. (required)
     * @param  bool $saveToDefaultModelDirectory (optional, default to true)
     * @param  bool $forceTraining (optional, default to false)
     * @param  string $augmentation (optional, default to '50')
     * @param  string $numThreads (optional, default to '1')
     * @param  string $callbackUrl If specified the call will return immediately with an empty response and status code 204. The actual result or any errors will be sent to the given callback URL as the body of a post request. (optional, default to 'None')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function trainModelAsync($jSONTrainingRequest, $saveToDefaultModelDirectory = true, $forceTraining = false, $augmentation = '50', $numThreads = '1', $callbackUrl = 'None')
    {
        return $this->trainModelAsyncWithHttpInfo($jSONTrainingRequest, $saveToDefaultModelDirectory, $forceTraining, $augmentation, $numThreads, $callbackUrl)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation trainModelAsyncWithHttpInfo
     *
     * Train a Rasa model
     *
     * @param  \FilippoToso\Rasa\Model\JSONTrainingRequest $jSONTrainingRequest The training data can either be in YAML format or a JSON which contains Rasa training data in YAML format for each required key. (required)
     * @param  bool $saveToDefaultModelDirectory (optional, default to true)
     * @param  bool $forceTraining (optional, default to false)
     * @param  string $augmentation (optional, default to '50')
     * @param  string $numThreads (optional, default to '1')
     * @param  string $callbackUrl If specified the call will return immediately with an empty response and status code 204. The actual result or any errors will be sent to the given callback URL as the body of a post request. (optional, default to 'None')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function trainModelAsyncWithHttpInfo($jSONTrainingRequest, $saveToDefaultModelDirectory = true, $forceTraining = false, $augmentation = '50', $numThreads = '1', $callbackUrl = 'None')
    {
        $returnType = '\SplFileObject';
        $request = $this->trainModelRequest($jSONTrainingRequest, $saveToDefaultModelDirectory, $forceTraining, $augmentation, $numThreads, $callbackUrl);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'trainModel'
     *
     * @param  \FilippoToso\Rasa\Model\JSONTrainingRequest $jSONTrainingRequest The training data can either be in YAML format or a JSON which contains Rasa training data in YAML format for each required key. (required)
     * @param  bool $saveToDefaultModelDirectory (optional, default to true)
     * @param  bool $forceTraining (optional, default to false)
     * @param  string $augmentation (optional, default to '50')
     * @param  string $numThreads (optional, default to '1')
     * @param  string $callbackUrl If specified the call will return immediately with an empty response and status code 204. The actual result or any errors will be sent to the given callback URL as the body of a post request. (optional, default to 'None')
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function trainModelRequest($jSONTrainingRequest, $saveToDefaultModelDirectory = true, $forceTraining = false, $augmentation = '50', $numThreads = '1', $callbackUrl = 'None')
    {
        // verify the required parameter 'jSONTrainingRequest' is set
        if ($jSONTrainingRequest === null || (is_array($jSONTrainingRequest) && count($jSONTrainingRequest) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $jSONTrainingRequest when calling trainModel'
            );
        }

        $resourcePath = '/model/train';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($saveToDefaultModelDirectory !== null) {
            if('form' === 'form' && is_array($saveToDefaultModelDirectory)) {
                foreach($saveToDefaultModelDirectory as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['save_to_default_model_directory'] = $saveToDefaultModelDirectory;
            }
        }
        // query params
        if ($forceTraining !== null) {
            if('form' === 'form' && is_array($forceTraining)) {
                foreach($forceTraining as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['force_training'] = $forceTraining;
            }
        }
        // query params
        if ($augmentation !== null) {
            if('form' === 'form' && is_array($augmentation)) {
                foreach($augmentation as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['augmentation'] = $augmentation;
            }
        }
        // query params
        if ($numThreads !== null) {
            if('form' === 'form' && is_array($numThreads)) {
                foreach($numThreads as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['num_threads'] = $numThreads;
            }
        }
        // query params
        if ($callbackUrl !== null) {
            if('form' === 'form' && is_array($callbackUrl)) {
                foreach($callbackUrl as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['callback_url'] = $callbackUrl;
            }
        }




        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/octet-stream', 'application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/octet-stream', 'application/json'],
                ['application/json', 'application/x-yaml']
            );
        }

        // for model (json/xml)
        if (isset($jSONTrainingRequest)) {
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($jSONTrainingRequest));
            } else {
                $httpBody = $jSONTrainingRequest;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation unloadModel
     *
     * Unload the trained model
     *
     *
     * @throws \FilippoToso\Rasa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function unloadModel()
    {
        $this->unloadModelWithHttpInfo();
    }

    /**
     * Operation unloadModelWithHttpInfo
     *
     * Unload the trained model
     *
     *
     * @throws \FilippoToso\Rasa\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function unloadModelWithHttpInfo()
    {
        $request = $this->unloadModelRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\FilippoToso\Rasa\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation unloadModelAsync
     *
     * Unload the trained model
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unloadModelAsync()
    {
        return $this->unloadModelAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation unloadModelAsyncWithHttpInfo
     *
     * Unload the trained model
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unloadModelAsyncWithHttpInfo()
    {
        $returnType = '';
        $request = $this->unloadModelRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'unloadModel'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function unloadModelRequest()
    {

        $resourcePath = '/model';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires Bearer (JWT) authentication (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('token');
        if ($apiKey !== null) {
            $queryParams['token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
