<?php
/**
 * Tracker
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  FilippoToso\Rasa
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Rasa - Server Endpoints
 *
 * The Rasa server provides endpoints to retrieve trackers of conversations as well as endpoints to modify them. Additionally, endpoints for training and testing models are provided.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FilippoToso\Rasa\Model;

use \ArrayAccess;
use \FilippoToso\Rasa\ObjectSerializer;

/**
 * Tracker Class Doc Comment
 *
 * @category Class
 * @description Conversation tracker which stores the conversation state.
 * @package  FilippoToso\Rasa
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class Tracker implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Tracker';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'conversationId' => 'string',
        'slots' => '\FilippoToso\Rasa\Model\array[]',
        'latestMessage' => '\FilippoToso\Rasa\Model\ParseResult',
        'latestEventTime' => 'float',
        'followupAction' => 'string',
        'paused' => 'bool',
        'events' => '\FilippoToso\Rasa\Model\Event[]',
        'latestInputChannel' => 'string',
        'latestActionName' => 'string',
        'latestAction' => '\FilippoToso\Rasa\Model\LatestAction',
        'activeLoop' => '\FilippoToso\Rasa\Model\TrackerActiveLoop'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'conversationId' => null,
        'slots' => null,
        'latestMessage' => null,
        'latestEventTime' => null,
        'followupAction' => null,
        'paused' => null,
        'events' => null,
        'latestInputChannel' => null,
        'latestActionName' => null,
        'latestAction' => null,
        'activeLoop' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'conversationId' => 'conversation_id',
        'slots' => 'slots',
        'latestMessage' => 'latest_message',
        'latestEventTime' => 'latest_event_time',
        'followupAction' => 'followup_action',
        'paused' => 'paused',
        'events' => 'events',
        'latestInputChannel' => 'latest_input_channel',
        'latestActionName' => 'latest_action_name',
        'latestAction' => 'latest_action',
        'activeLoop' => 'active_loop'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'conversationId' => 'setConversationId',
        'slots' => 'setSlots',
        'latestMessage' => 'setLatestMessage',
        'latestEventTime' => 'setLatestEventTime',
        'followupAction' => 'setFollowupAction',
        'paused' => 'setPaused',
        'events' => 'setEvents',
        'latestInputChannel' => 'setLatestInputChannel',
        'latestActionName' => 'setLatestActionName',
        'latestAction' => 'setLatestAction',
        'activeLoop' => 'setActiveLoop'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'conversationId' => 'getConversationId',
        'slots' => 'getSlots',
        'latestMessage' => 'getLatestMessage',
        'latestEventTime' => 'getLatestEventTime',
        'followupAction' => 'getFollowupAction',
        'paused' => 'getPaused',
        'events' => 'getEvents',
        'latestInputChannel' => 'getLatestInputChannel',
        'latestActionName' => 'getLatestActionName',
        'latestAction' => 'getLatestAction',
        'activeLoop' => 'getActiveLoop'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['conversationId'] = $data['conversationId'] ?? null;
        $this->container['slots'] = $data['slots'] ?? null;
        $this->container['latestMessage'] = $data['latestMessage'] ?? null;
        $this->container['latestEventTime'] = $data['latestEventTime'] ?? null;
        $this->container['followupAction'] = $data['followupAction'] ?? null;
        $this->container['paused'] = $data['paused'] ?? null;
        $this->container['events'] = $data['events'] ?? null;
        $this->container['latestInputChannel'] = $data['latestInputChannel'] ?? null;
        $this->container['latestActionName'] = $data['latestActionName'] ?? null;
        $this->container['latestAction'] = $data['latestAction'] ?? null;
        $this->container['activeLoop'] = $data['activeLoop'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets conversationId
     *
     * @return string|null
     */
    public function getConversationId()
    {
        return $this->container['conversationId'];
    }

    /**
     * Sets conversationId
     *
     * @param string|null $conversationId ID of the conversation
     *
     * @return self
     */
    public function setConversationId($conversationId)
    {
        $this->container['conversationId'] = $conversationId;

        return $this;
    }

    /**
     * Gets slots
     *
     * @return \FilippoToso\Rasa\Model\array[]|null
     */
    public function getSlots()
    {
        return $this->container['slots'];
    }

    /**
     * Sets slots
     *
     * @param \FilippoToso\Rasa\Model\array[]|null $slots Slot values
     *
     * @return self
     */
    public function setSlots($slots)
    {
        $this->container['slots'] = $slots;

        return $this;
    }

    /**
     * Gets latestMessage
     *
     * @return \FilippoToso\Rasa\Model\ParseResult|null
     */
    public function getLatestMessage()
    {
        return $this->container['latestMessage'];
    }

    /**
     * Sets latestMessage
     *
     * @param \FilippoToso\Rasa\Model\ParseResult|null $latestMessage latestMessage
     *
     * @return self
     */
    public function setLatestMessage($latestMessage)
    {
        $this->container['latestMessage'] = $latestMessage;

        return $this;
    }

    /**
     * Gets latestEventTime
     *
     * @return float|null
     */
    public function getLatestEventTime()
    {
        return $this->container['latestEventTime'];
    }

    /**
     * Sets latestEventTime
     *
     * @param float|null $latestEventTime Most recent event time
     *
     * @return self
     */
    public function setLatestEventTime($latestEventTime)
    {
        $this->container['latestEventTime'] = $latestEventTime;

        return $this;
    }

    /**
     * Gets followupAction
     *
     * @return string|null
     */
    public function getFollowupAction()
    {
        return $this->container['followupAction'];
    }

    /**
     * Sets followupAction
     *
     * @param string|null $followupAction Deterministic scheduled next action
     *
     * @return self
     */
    public function setFollowupAction($followupAction)
    {
        $this->container['followupAction'] = $followupAction;

        return $this;
    }

    /**
     * Gets paused
     *
     * @return bool|null
     */
    public function getPaused()
    {
        return $this->container['paused'];
    }

    /**
     * Sets paused
     *
     * @param bool|null $paused Bot is paused
     *
     * @return self
     */
    public function setPaused($paused)
    {
        $this->container['paused'] = $paused;

        return $this;
    }

    /**
     * Gets events
     *
     * @return \FilippoToso\Rasa\Model\Event[]|null
     */
    public function getEvents()
    {
        return $this->container['events'];
    }

    /**
     * Sets events
     *
     * @param \FilippoToso\Rasa\Model\Event[]|null $events Event history
     *
     * @return self
     */
    public function setEvents($events)
    {
        $this->container['events'] = $events;

        return $this;
    }

    /**
     * Gets latestInputChannel
     *
     * @return string|null
     */
    public function getLatestInputChannel()
    {
        return $this->container['latestInputChannel'];
    }

    /**
     * Sets latestInputChannel
     *
     * @param string|null $latestInputChannel Communication channel
     *
     * @return self
     */
    public function setLatestInputChannel($latestInputChannel)
    {
        $this->container['latestInputChannel'] = $latestInputChannel;

        return $this;
    }

    /**
     * Gets latestActionName
     *
     * @return string|null
     */
    public function getLatestActionName()
    {
        return $this->container['latestActionName'];
    }

    /**
     * Sets latestActionName
     *
     * @param string|null $latestActionName Name of last bot action
     *
     * @return self
     */
    public function setLatestActionName($latestActionName)
    {
        $this->container['latestActionName'] = $latestActionName;

        return $this;
    }

    /**
     * Gets latestAction
     *
     * @return \FilippoToso\Rasa\Model\LatestAction|null
     */
    public function getLatestAction()
    {
        return $this->container['latestAction'];
    }

    /**
     * Sets latestAction
     *
     * @param \FilippoToso\Rasa\Model\LatestAction|null $latestAction latestAction
     *
     * @return self
     */
    public function setLatestAction($latestAction)
    {
        $this->container['latestAction'] = $latestAction;

        return $this;
    }

    /**
     * Gets activeLoop
     *
     * @return \FilippoToso\Rasa\Model\TrackerActiveLoop|null
     */
    public function getActiveLoop()
    {
        return $this->container['activeLoop'];
    }

    /**
     * Sets activeLoop
     *
     * @param \FilippoToso\Rasa\Model\TrackerActiveLoop|null $activeLoop activeLoop
     *
     * @return self
     */
    public function setActiveLoop($activeLoop)
    {
        $this->container['activeLoop'] = $activeLoop;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


