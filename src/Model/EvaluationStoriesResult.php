<?php
/**
 * EvaluationStoriesResult
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  FilippoToso\Rasa
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Rasa - Server Endpoints
 *
 * The Rasa server provides endpoints to retrieve trackers of conversations as well as endpoints to modify them. Additionally, endpoints for training and testing models are provided.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace FilippoToso\Rasa\Model;

use \ArrayAccess;
use \FilippoToso\Rasa\ObjectSerializer;

/**
 * EvaluationStoriesResult Class Doc Comment
 *
 * @category Class
 * @package  FilippoToso\Rasa
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null  
 */
class EvaluationStoriesResult implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'EvaluationStoriesResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'actions' => '\FilippoToso\Rasa\Model\EvaluationStoriesResultActions[]',
        'isEndToEndEvaluation' => 'bool',
        'precision' => 'float',
        'f1' => 'float',
        'accuracy' => 'float',
        'inTrainingDataFraction' => 'float',
        'report' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'actions' => null,
        'isEndToEndEvaluation' => null,
        'precision' => null,
        'f1' => null,
        'accuracy' => null,
        'inTrainingDataFraction' => null,
        'report' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'actions' => 'actions',
        'isEndToEndEvaluation' => 'is_end_to_end_evaluation',
        'precision' => 'precision',
        'f1' => 'f1',
        'accuracy' => 'accuracy',
        'inTrainingDataFraction' => 'in_training_data_fraction',
        'report' => 'report'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'actions' => 'setActions',
        'isEndToEndEvaluation' => 'setIsEndToEndEvaluation',
        'precision' => 'setPrecision',
        'f1' => 'setF1',
        'accuracy' => 'setAccuracy',
        'inTrainingDataFraction' => 'setInTrainingDataFraction',
        'report' => 'setReport'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'actions' => 'getActions',
        'isEndToEndEvaluation' => 'getIsEndToEndEvaluation',
        'precision' => 'getPrecision',
        'f1' => 'getF1',
        'accuracy' => 'getAccuracy',
        'inTrainingDataFraction' => 'getInTrainingDataFraction',
        'report' => 'getReport'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['actions'] = $data['actions'] ?? null;
        $this->container['isEndToEndEvaluation'] = $data['isEndToEndEvaluation'] ?? null;
        $this->container['precision'] = $data['precision'] ?? null;
        $this->container['f1'] = $data['f1'] ?? null;
        $this->container['accuracy'] = $data['accuracy'] ?? null;
        $this->container['inTrainingDataFraction'] = $data['inTrainingDataFraction'] ?? null;
        $this->container['report'] = $data['report'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets actions
     *
     * @return \FilippoToso\Rasa\Model\EvaluationStoriesResultActions[]|null
     */
    public function getActions()
    {
        return $this->container['actions'];
    }

    /**
     * Sets actions
     *
     * @param \FilippoToso\Rasa\Model\EvaluationStoriesResultActions[]|null $actions Accuracy of the classification, http://scikit-learn.org/stable/modules/generated/sklearn.metrics.accuracy_score.html
     *
     * @return self
     */
    public function setActions($actions)
    {
        $this->container['actions'] = $actions;

        return $this;
    }

    /**
     * Gets isEndToEndEvaluation
     *
     * @return bool|null
     */
    public function getIsEndToEndEvaluation()
    {
        return $this->container['isEndToEndEvaluation'];
    }

    /**
     * Sets isEndToEndEvaluation
     *
     * @param bool|null $isEndToEndEvaluation True if evaluation is end-to-end, false otherwise
     *
     * @return self
     */
    public function setIsEndToEndEvaluation($isEndToEndEvaluation)
    {
        $this->container['isEndToEndEvaluation'] = $isEndToEndEvaluation;

        return $this;
    }

    /**
     * Gets precision
     *
     * @return float|null
     */
    public function getPrecision()
    {
        return $this->container['precision'];
    }

    /**
     * Sets precision
     *
     * @param float|null $precision Precision of the classification, see http://scikit-learn.org/stable/modules/generated/sklearn.metrics.precision_score.html
     *
     * @return self
     */
    public function setPrecision($precision)
    {
        $this->container['precision'] = $precision;

        return $this;
    }

    /**
     * Gets f1
     *
     * @return float|null
     */
    public function getF1()
    {
        return $this->container['f1'];
    }

    /**
     * Sets f1
     *
     * @param float|null $f1 F1 score of the classification, http://scikit-learn.org/stable/modules/generated/sklearn.metrics.precision_score.html
     *
     * @return self
     */
    public function setF1($f1)
    {
        $this->container['f1'] = $f1;

        return $this;
    }

    /**
     * Gets accuracy
     *
     * @return float|null
     */
    public function getAccuracy()
    {
        return $this->container['accuracy'];
    }

    /**
     * Sets accuracy
     *
     * @param float|null $accuracy Accuracy of the classification, http://scikit-learn.org/stable/modules/generated/sklearn.metrics.accuracy_score.html
     *
     * @return self
     */
    public function setAccuracy($accuracy)
    {
        $this->container['accuracy'] = $accuracy;

        return $this;
    }

    /**
     * Gets inTrainingDataFraction
     *
     * @return float|null
     */
    public function getInTrainingDataFraction()
    {
        return $this->container['inTrainingDataFraction'];
    }

    /**
     * Sets inTrainingDataFraction
     *
     * @param float|null $inTrainingDataFraction Fraction of stories that are present in the training data of the model loaded at evaluation time.
     *
     * @return self
     */
    public function setInTrainingDataFraction($inTrainingDataFraction)
    {
        $this->container['inTrainingDataFraction'] = $inTrainingDataFraction;

        return $this;
    }

    /**
     * Gets report
     *
     * @return string|null
     */
    public function getReport()
    {
        return $this->container['report'];
    }

    /**
     * Sets report
     *
     * @param string|null $report Sklearn classification report, see http://scikit-learn.org/stable/modules/generated/sklearn.metrics.classification_report.html
     *
     * @return self
     */
    public function setReport($report)
    {
        $this->container['report'] = $report;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


